#Updates netdot database from version 0.9 to version 1.0

use warnings;
use strict;
use lib "../lib";
use DBUTIL;
use Netdot;
use Netdot::Model;
use Netdot::Meta;
use Data::Dumper;

my %CONFIG;
$CONFIG{debug} = 1;
$CONFIG{CONFIG_DIR} = "../etc";
$CONFIG{SCHEMA_FILE}  = "$CONFIG{CONFIG_DIR}/netdot.meta";
$CONFIG{DEFAULT_DATA} = "$CONFIG{CONFIG_DIR}/default_data";

my $netdot_config = Netdot::Config->new(config_dir => $CONFIG{CONFIG_DIR});

my $dbh = &dbconnect();
my @statements = ();

if ($netdot_config->get('DB_TYPE') eq "mysql") {
    @statements = (
	"CREATE TABLE `asset` (
            `custom_serial` varchar(255),
            `date_purchased` date,
            `description` varchar(255),
            `id` bigint NOT NULL auto_increment,
            `info` text,
            `inventory_number` varchar(255),
            `maint_contract` bigint,
            `maint_from` date,
            `maint_until` date,
            `physaddr` bigint,
            `po_number` varchar(255),
            `product_id` bigint,
            `reserved_for` varchar(255),
            `serial_number` varchar(255),
            UNIQUE INDEX asset1 (`physaddr`),
            UNIQUE INDEX asset2 (`serial_number`),
            INDEX Asset3 (`product_id`),
            INDEX Asset4 (`inventory_number`),
            INDEX Asset5 (`po_number`),
            INDEX (`maint_contract`),
            PRIMARY KEY (`id`)
         ) ENGINE=InnoDB;",
        );
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    my $u = $netdot_config->get('DB_NETDOT_USER');
    @statements = (
	"CREATE TABLE asset (
             custom_serial character varying(255),
             date_purchased date,
             description character varying(255),
             id serial NOT NULL,
             info text,
             inventory_number character varying(255),
             maint_contract bigint,
             maint_from date,
             maint_until date,
             physaddr bigint,
             po_number character varying(255),
             reserved_for character varying(255),
             product_id bigint,
             serial_number character varying(255)
        );",
	"CREATE INDEX Asset3 on asset (\"product_id\");",
	"CREATE INDEX Asset4 on asset (\"inventory_number\");",
        "CREATE INDEX Asset5 on asset (\"po_number\");",
	"GRANT ALL ON asset TO $u;",
        );
}

&processdata(\@statements);

# Store assets to be inserted, keyed by serial number
my %assets;

# Grab devices with serial number
my $sndevs = $dbh->selectall_arrayref('SELECT serialnumber,custom_serial,physaddr,
                                              inventorynumber,maint_contract,maint_from,
                                              maint_until,product 
                                         FROM device
		                        WHERE serialnumber IS NOT NULL
                                          AND serialnumber != "" ');
foreach my $row ( @$sndevs ){
    my $sn = $row->[0];
    $sn =~ s/^\s+|\s+$//g;
    next unless $sn;
    # Convert foreign keys from 0 to undef
    $row->[2] = undef if $row->[2] == 0;
    $row->[4] = undef if $row->[4] == 0;
    $row->[7] = undef if $row->[7] == 0;
    my $i = 1;
    foreach my $v (qw/cs ph in mc mf mu pr/){
	$assets{sn}{$sn}{$v} = $row->[$i];
	$i++;
    }
}

# Grab devices with base MAC but no serial number
my $macdevs = $dbh->selectall_arrayref('SELECT physaddr,custom_serial,inventorynumber,
                                               maint_contract,maint_from,maint_until,product 
                                          FROM device
		                         WHERE physaddr is not NULL
                                           AND physaddr != 0
                                           AND (serialnumber IS NULL
                                             OR serialnumber = "")');
foreach my $row ( @$macdevs ){
    my $ph = $row->[0];
    $ph =~ s/^\s+|\s+$//g;
    next unless $ph;
    # Convert foreign keys from 0 to undef
    $row->[3] = undef if $row->[3] == 0;
    $row->[6] = undef if $row->[6] == 0;
    my $i = 1;
    foreach my $v (qw/cs in mc mf mu pr/){
	$assets{ph}{$ph}{$v} = $row->[$i];
	$i++;
    }
}

# Create asset records with information from devices
my $ia = $dbh->prepare('INSERT INTO asset (serial_number,custom_serial,physaddr,
                                           inventory_number,maint_contract,
                                           maint_from,maint_until,product_id)
                                           VALUES (?,?,?,?,?,?,?,?)');
my %newassets;
foreach my $sn ( keys %{$assets{sn}} ){
    my %vals = %{$assets{sn}{$sn}};
    my ($cs,$ph,$in,$mc,$mf,$mu,$pr) = @vals{'cs','ph','in','mc','mf','mu','pr'};
    $ia->execute($sn,$cs,$ph,$in,$mc,$mf,$mu,$pr);
    $newassets{$ph} = 1 if $ph;
}

foreach my $ph ( keys %{$assets{ph}} ){
    my %vals = %{$assets{ph}{$ph}};
    my ($cs,$in,$mc,$mf,$mu,$pr) = @vals{'cs','in','mc','mf','mu','pr'};
    next if ( exists $newassets{$ph} );
    my $sn = undef;
    $ia->execute($sn,$cs,$ph,$in,$mc,$mf,$mu,$pr);
}


# Grab hostaudit data before conversion
my $haudits = $dbh->selectall_arrayref('SELECT          ha.id,zone.name,dhcpscope.name  
                                        FROM            hostaudit ha 
                                        LEFT OUTER JOIN zone ON ha.zone=zone.id 
                                        LEFT OUTER JOIN dhcpscope ON ha.scope=dhcpscope.id');
my %haudit;
foreach my $row ( @$haudits ){
    my ($id, $zone, $scope) = @$row;
    $haudit{$id}{zone}  = $zone;
    $haudit{$id}{scope} = $scope;
}
 
if ($netdot_config->get('DB_TYPE') eq "mysql") {
    my $dbname = $netdot_config->get('DB_DATABASE');
    @statements = (
            "ALTER DATABASE $dbname CHARACTER SET utf8 COLLATE utf8_general_ci;",
            "ALTER TABLE device ADD COLUMN asset_id bigint AFTER aliases;",
            "ALTER TABLE device ADD COLUMN extension integer AFTER down_until;",
            "ALTER TABLE device_history ADD COLUMN asset_id bigint AFTER aliases;",
            "ALTER TABLE device_history ADD COLUMN extension integer AFTER down_until;",

            "UPDATE device,asset SET device.asset_id=asset.id 
              WHERE asset.serial_number=device.serialnumber
                OR  asset.physaddr=device.physaddr;",

            "ALTER TABLE device DROP COLUMN serialnumber;",
            "ALTER TABLE device DROP COLUMN inventorynumber;",
            "ALTER TABLE device DROP COLUMN maint_contract;",
            "ALTER TABLE device DROP COLUMN maint_from;",
            "ALTER TABLE device DROP COLUMN maint_until;",
            "ALTER TABLE device DROP COLUMN custom_serial;",
            "ALTER TABLE device DROP COLUMN physaddr;",
            "ALTER TABLE device DROP COLUMN product;",
            "ALTER TABLE device ADD INDEX Device13 (extension);",
            "ALTER TABLE device_history DROP COLUMN serialnumber;",
            "ALTER TABLE device_history DROP COLUMN inventorynumber;",
            "ALTER TABLE device_history DROP COLUMN maint_contract;",
            "ALTER TABLE device_history DROP COLUMN maint_from;",
            "ALTER TABLE device_history DROP COLUMN maint_until;",
            "ALTER TABLE device_history DROP COLUMN custom_serial;",
            "ALTER TABLE device_history DROP COLUMN physaddr;",
            "ALTER TABLE device_history DROP COLUMN product;",
            "ALTER TABLE devicemodule CHANGE COLUMN serialnumber serial_number varchar(128);",
            "ALTER TABLE devicemodule CHANGE COLUMN inventorynumber inventory_number varchar(64);",
            "ALTER TABLE devicemodule ADD INDEX devicemodule2 (serial_number);",
            "ALTER TABLE devicemodule ADD INDEX devicemodule3 (inventory_number);",
            "ALTER TABLE dhcpscope ADD COLUMN active tinyint(1) NOT NULL;",
            "UPDATE dhcpscope SET active=1;",
            "ALTER TABLE dhcpscope ADD COLUMN duid varchar(255);",
            "ALTER TABLE dhcpscope ADD COLUMN version integer;",
            "ALTER TABLE entity ADD COLUMN config_type varchar(255);",
            "ALTER TABLE entity_history ADD COLUMN config_type varchar(255);",
            "ALTER TABLE product ADD COLUMN part_number varchar(255);",
            "ALTER TABLE product ADD COLUMN config_type varchar(255);",
            "ALTER TABLE product_history ADD COLUMN part_number varchar(255);",
            "ALTER TABLE product_history ADD COLUMN config_type varchar(255);",
            "ALTER TABLE interface MODIFY COLUMN speed bigint;",
            "ALTER TABLE datacache MODIFY COLUMN tstamp bigint NOT NULL;",
            "DELETE FROM datacache;",
            "ALTER TABLE device ADD COLUMN snmp_conn_attempts integer AFTER snmp_bulk;",
            "ALTER TABLE device ADD COLUMN snmp_down tinyint(1) NOT NULL AFTER snmp_conn_attempts;",
            "ALTER TABLE device_history ADD COLUMN snmp_conn_attempts integer AFTER snmp_bulk;",
            "ALTER TABLE device_history ADD COLUMN snmp_down tinyint(1) NOT NULL AFTER snmp_conn_attempts;",
            "ALTER TABLE rr ADD COLUMN created timestamp AFTER auto_update;",
            "ALTER TABLE rr ADD COLUMN modified timestamp AFTER info;",
            "ALTER TABLE rr ADD INDEX RR4 (`created`);",
            "ALTER TABLE rr ADD INDEX RR5 (`modified`);",
            "ALTER TABLE zone ADD COLUMN include blob AFTER id;",
            "ALTER TABLE rrloc MODIFY COLUMN latitude bigint NOT NULL;",
            "ALTER TABLE rrloc MODIFY COLUMN longitude bigint NOT NULL;",
            "ALTER TABLE rrloc MODIFY COLUMN altitude bigint NOT NULL;",
            "ALTER TABLE zone MODIFY COLUMN minimum bigint NOT NULL;",
            "ALTER TABLE zone MODIFY COLUMN serial bigint NOT NULL;",
            "ALTER TABLE bgppeering ADD COLUMN authkey varchar(255);",
            "ALTER TABLE bgppeering ADD COLUMN info text;",
            "ALTER TABLE bgppeering ADD COLUMN max_v4_prefixes integer;",
            "ALTER TABLE bgppeering ADD COLUMN max_v6_prefixes integer;",
            "ALTER TABLE hostaudit MODIFY COLUMN zone varchar(255);",
            "ALTER TABLE hostaudit MODIFY COLUMN scope varchar(255);",
            "ALTER TABLE hostaudit CHANGE COLUMN user username varchar(255);",
            "ALTER TABLE dhcpscope MODIFY COLUMN text text;",
            "ALTER TABLE dhcpscope MODIFY COLUMN export_file varchar(255);",
            "ALTER TABLE dhcpscope MODIFY COLUMN failover_peer varchar(128);",
            "ALTER TABLE zone MODIFY COLUMN include text;",
            "ALTER TABLE savedqueries MODIFY COLUMN querytext text;",
            );
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    @statements = (
            "ALTER TABLE device ADD COLUMN asset_id bigint;",
            "ALTER TABLE device ADD COLUMN extension integer NULL;",
            "ALTER TABLE device DROP COLUMN physaddr;",
	    "ALTER TABLE device DROP COLUMN product;",
            "ALTER TABLE device_history ADD COLUMN asset_id bigint;",
            "ALTER TABLE device_history ADD COLUMN extension integer NULL;",
            "ALTER TABLE device_history DROP COLUMN physaddr;",
	    "ALTER TABLE device_history DROP COLUMN product;",

            "UPDATE device SET asset_id=asset.id 
               FROM asset 
              WHERE asset.serial_number=device.serialnumber
                 OR asset.physaddr=device.physaddr;",

            "ALTER TABLE device DROP COLUMN serialnumber;",
            "ALTER TABLE device DROP COLUMN inventorynumber;",
            "ALTER TABLE device DROP COLUMN maint_contract;",
            "ALTER TABLE device DROP COLUMN maint_from;",
            "ALTER TABLE device DROP COLUMN maint_until;",
            "ALTER TABLE device DROP COLUMN custom_serial;",
            "ALTER TABLE device DROP COLUMN physaddr;",
            "ALTER TABLE device DROP COLUMN product;",
            "CREATE UNIQUE INDEX Device2 ON device(asset_id);",
            "CREATE INDEX Device14 ON device(extension);",
            "ALTER TABLE device_history DROP COLUMN serialnumber;",
            "ALTER TABLE device_history DROP COLUMN inventorynumber;",
            "ALTER TABLE device_history DROP COLUMN maint_contract;",
            "ALTER TABLE device_history DROP COLUMN maint_from;",
            "ALTER TABLE device_history DROP COLUMN maint_until;",
            "ALTER TABLE device_history DROP COLUMN custom_serial;",
            "ALTER TABLE device_history DROP COLUMN physaddr;",
            "ALTER TABLE device_history DROP COLUMN product;",
            "ALTER TABLE devicemodule RENAME COLUMN serialnumber TO serial_number;",
            "ALTER TABLE devicemodule RENAME COLUMN inventorynumber TO inventory_number;",
            "CREATE INDEX devicemodule2 ON devicemodule(serial_number);",
            "CREATE INDEX devicemodule3 ON devicemodule(inventory_number);",
            "ALTER TABLE dhcpscope ADD COLUMN active smallint NOT NULL;",
            "UPDATE dhcpscope SET active=1;",
            "ALTER TABLE dhcpscope ADD COLUMN duid varchar(255);",
            "ALTER TABLE dhcpscope ADD COLUMN version integer;",
            "ALTER TABLE entity ADD COLUMN config_type varchar(255);",
            "ALTER TABLE entity_history ADD COLUMN config_type varchar(255);",
            "ALTER TABLE product ADD COLUMN part_number varchar(255);",
            "ALTER TABLE product ADD COLUMN config_type varchar(255);",
            "ALTER TABLE product_history ADD COLUMN part_number varchar(255);",
            "ALTER TABLE product_history ADD COLUMN config_type varchar(255);",
            "ALTER TABLE interface ALTER COLUMN speed TYPE bigint;",
            "DELETE FROM datacache;",
            "ALTER TABLE device ADD COLUMN snmp_conn_attempts integer;",
            "ALTER TABLE device ADD COLUMN snmp_down smallint NOT NULL;",
            "ALTER TABLE device_history ADD COLUMN snmp_conn_attempts integer;",
            "ALTER TABLE device_history ADD COLUMN snmp_down smallint NOT NULL;",
            "ALTER TABLE rr ADD COLUMN created timestamp;",
            "ALTER TABLE rr ADD COLUMN modified timestamp;",
            "CREATE INDEX RR4 ON rr(created);",
            "CREATE INDEX RR5 ON rr(modified);",
            "ALTER TABLE zone ADD COLUMN include text;",
            "ALTER TABLE rrloc ALTER COLUMN latitude TYPE bigint;",
            "ALTER TABLE rrloc ALTER COLUMN longitude TYPE bigint;",
            "ALTER TABLE rrloc ALTER COLUMN altitude TYPE bigint;",
            "ALTER TABLE zone ALTER COLUMN minimum TYPE bigint;",
            "ALTER TABLE zone ALTER COLUMN serial TYPE bigint;",
            "ALTER TABLE bgppeering ADD COLUMN authkey varchar(255);",
            "ALTER TABLE bgppeering ADD COLUMN info text;",
            "ALTER TABLE bgppeering ADD COLUMN max_v4_prefixes integer;",
            "ALTER TABLE bgppeering ADD COLUMN max_v6_prefixes integer;",
            "ALTER TABLE hostaudit ALTER COLUMN zone TYPE varchar(255);",
            "ALTER TABLE hostaudit ALTER COLUMN scope TYPE varchar(255);",
            "ALTER TABLE hostaudit RENAME COLUMN \"user\" TO username;",
            "ALTER TABLE dhcpscope ALTER COLUMN text TYPE text;",
            "ALTER TABLE dhcpscope ALTER COLUMN export_file TYPE varchar(255);",
            "ALTER TABLE dhcpscope ALTER COLUMN failover_peer TYPE varchar(128);",
            "ALTER TABLE zone ALTER COLUMN include TYPE text;",
            "ALTER TABLE savedqueries ALTER COLUMN querytext TYPE text;",
            );
}

# Change all table IDs and foreign keys to bigint (Ticket #737)
# Also, set them to NULLable and replace 0s with NULL values
# This allows us to apply foreign_key constraints and allow 
# user to fix their data before applying the NOT NULL constraints,
# which can be done later (see below)
my $meta = Netdot::Meta->new();
my @tables = $meta->get_tables(with_history=>1);

foreach my $mtable ( sort { $a->name cmp $b->name } @tables ){
    my $tname = lc($mtable->name);
    foreach my $mcol ( $mtable->get_columns ) {
        my $cname = $mcol->name;
        if ( $cname eq 'id' ){
            if ($netdot_config->get('DB_TYPE') eq "mysql") {
                push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname bigint NOT NULL auto_increment;";
            } elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname TYPE bigint;";
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname SET NOT NULL;";
            }
        } elsif ($cname eq 'info') {
            if ($netdot_config->get('DB_TYPE') eq "mysql") {
                push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname text;";
            } elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname TYPE text;";
            }
        }
        if ( $mcol->links_to ){
            if ($netdot_config->get('DB_TYPE') eq "mysql") {
                push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname bigint;";
            } elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname DROP NOT NULL;";
                push @statements, "ALTER TABLE $tname ALTER COLUMN $cname TYPE bigint;";
            }
            push @statements, "UPDATE $tname SET $cname=NULL WHERE $cname=0;";
        }
    }

    if ($netdot_config->get('DB_TYPE') eq "mysql") {
        push @statements, "ALTER TABLE $tname CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;";
    } 
}

# Exceptions
if ($netdot_config->get('DB_TYPE') eq "mysql") {
    push @statements, "ALTER TABLE accessright MODIFY COLUMN object_id bigint NOT NULL;";
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    push @statements, "ALTER TABLE accessright ALTER COLUMN object_id TYPE bigint;";
    push @statements, "ALTER TABLE accessright ALTER COLUMN object_id SET NOT NULL;";
}


# Update hostaudit with string data
#
foreach my $hid ( keys %haudit ){
    my ($zone, $scope) = ($haudit{$hid}{zone}, $haudit{$hid}{scope});
    next unless ($zone || $scope);
    my $st = 'UPDATE hostaudit SET';
    $st .= " zone='$zone'" if $zone;
    $st .= "," if ($zone && $scope);
    $st .= " scope='$scope'" if $scope;
    $st .= " WHERE id=$hid;";
    push @statements,  $st;
}

# Set version to 4 on current global DhcpScopes
push @statements, "UPDATE dhcpscope,dhcpscopetype SET dhcpscope.version=4 WHERE dhcpscopetype.name='global' AND dhcpscope.type=dhcpscopetype.id;";

# Add new DHCP attributes
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('allow leasequery');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('preferred-lifetime');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.name-servers');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.domain-search');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.preference');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.rapid-commit');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('option dhcp6.info-refresh-time');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('dhcpv6-lease-file-name');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('range6');",
push @statements, "INSERT INTO dhcpattrname (name) VALUES ('prefix6');",

&processdata(\@statements);


##################   THIS HAS TO BE THE LAST THING   #######################
# Add FK constraints. 
my @schema = &generate_schema_from_metadata();
if ($netdot_config->get('DB_TYPE') eq "mysql") {
    @statements = ('SET foreign_key_checks=0;');
    my $fk_table;
    foreach ( @schema ){
        if ( /^CREATE TABLE `(\S+)`/ ){
            $fk_table = $1;
        }elsif ( /CONSTRAINT/ ){
            $_ =~ s/^\s+//; # Remove leading spaces
                $_ =~ s/,$//;   # Remove last comma
                push @statements, "ALTER TABLE $fk_table ADD $_;";
        }
    }
    push @statements, 'SET foreign_key_checks=1;';
} elsif ($netdot_config->get('DB_TYPE') eq "Pg") {
    @statements = ();
    foreach (0 .. $#schema ) { 
        if ( $schema[$_] =~  m/^ALTER TABLE "\S+" ADD FOREIGN KEY/ ) { 
            push @statements, $schema[$_] . $schema[$_ + 1];;
        }   
    }
}

&processdata(\@statements);

# Fix NOT NULL constraints
print "\n\n";
print '
This new version of Netdot fixes a number of lax database constraints. 
This means that table columns were previously defined in such a way that 
their values could be undefined (NULL) or zero when they should not. 

It is very likely that applying these constraints to your current schema now 
will fail because there are cases where columns were set to "NULL" or zero. 
You should try to apply these constraints now, and if they fail, you should 
fix your data and apply them again later.

Would you like to try applying these new "NOT NULL" constraints now? [y/N] ';
my $ans = <STDIN>;
if ( $ans =~ /^Y|y/ ){
    system('perl fix_not_null.pl');
}

&dbdisconnect();

